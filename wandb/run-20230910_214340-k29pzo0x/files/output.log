
using Segformer for training.
Some weights of the model checkpoint at nvidia/mit-b0 were not used when initializing SegformerForSemanticSegmentation: ['classifier.weight', 'classifier.bias']
- This IS expected if you are initializing SegformerForSemanticSegmentation from the checkpoint of a model trained on another task or with another architecture (e.g. initializing a BertForSequenceClassification model from a BertForPreTraining model).
- This IS NOT expected if you are initializing SegformerForSemanticSegmentation from the checkpoint of a model that you expect to be exactly identical (initializing a BertForSequenceClassification model from a BertForSequenceClassification model).
Some weights of SegformerForSemanticSegmentation were not initialized from the model checkpoint at nvidia/mit-b0 and are newly initialized: ['decode_head.linear_c.1.proj.weight', 'decode_head.classifier.weight', 'decode_head.linear_c.0.proj.bias', 'decode_head.batch_norm.weight', 'decode_head.linear_c.2.proj.weight', 'decode_head.batch_norm.running_var', 'decode_head.linear_c.0.proj.weight', 'decode_head.batch_norm.num_batches_tracked', 'decode_head.linear_c.2.proj.bias', 'decode_head.linear_c.3.proj.weight', 'decode_head.classifier.bias', 'decode_head.batch_norm.running_mean', 'decode_head.linear_fuse.weight', 'decode_head.linear_c.3.proj.bias', 'decode_head.linear_c.1.proj.bias', 'decode_head.batch_norm.bias']
You should probably TRAIN this model on a down-stream task to be able to use it for predictions and inference.
  0%|          | 0/1061 [00:00<?, ?it/s]
Traceback (most recent call last):
  File "/mnt/d/PROJECTION/TianChi/STS-2D/train.py", line 209, in <module>
    train_loss = train_step(train_loader, model, criterion, optimizer, CFG.device, epoch)
  File "/mnt/d/PROJECTION/TianChi/STS-2D/train.py", line 70, in train_step
    outputs = model(image.to(device))
  File "/home/zy/anaconda3/envs/kaggle_torch/lib/python3.9/site-packages/torch/nn/modules/module.py", line 1501, in _call_impl
    return forward_call(*args, **kwargs)
  File "/mnt/d/PROJECTION/TianChi/STS-2D/models.py", line 103, in forward
    x = self.model(x)
  File "/home/zy/anaconda3/envs/kaggle_torch/lib/python3.9/site-packages/torch/nn/modules/module.py", line 1501, in _call_impl
    return forward_call(*args, **kwargs)
  File "/home/zy/anaconda3/envs/kaggle_torch/lib/python3.9/site-packages/transformers/models/segformer/modeling_segformer.py", line 793, in forward
    outputs = self.segformer(
  File "/home/zy/anaconda3/envs/kaggle_torch/lib/python3.9/site-packages/torch/nn/modules/module.py", line 1501, in _call_impl
    return forward_call(*args, **kwargs)
  File "/home/zy/anaconda3/envs/kaggle_torch/lib/python3.9/site-packages/transformers/models/segformer/modeling_segformer.py", line 550, in forward
    encoder_outputs = self.encoder(
  File "/home/zy/anaconda3/envs/kaggle_torch/lib/python3.9/site-packages/torch/nn/modules/module.py", line 1501, in _call_impl
    return forward_call(*args, **kwargs)
  File "/home/zy/anaconda3/envs/kaggle_torch/lib/python3.9/site-packages/transformers/models/segformer/modeling_segformer.py", line 424, in forward
    hidden_states, height, width = embedding_layer(hidden_states)
  File "/home/zy/anaconda3/envs/kaggle_torch/lib/python3.9/site-packages/torch/nn/modules/module.py", line 1501, in _call_impl
    return forward_call(*args, **kwargs)
  File "/home/zy/anaconda3/envs/kaggle_torch/lib/python3.9/site-packages/transformers/models/segformer/modeling_segformer.py", line 139, in forward
    embeddings = self.proj(pixel_values)
  File "/home/zy/anaconda3/envs/kaggle_torch/lib/python3.9/site-packages/torch/nn/modules/module.py", line 1501, in _call_impl
    return forward_call(*args, **kwargs)
  File "/home/zy/anaconda3/envs/kaggle_torch/lib/python3.9/site-packages/torch/nn/modules/conv.py", line 463, in forward
    return self._conv_forward(input, self.weight, self.bias)
  File "/home/zy/anaconda3/envs/kaggle_torch/lib/python3.9/site-packages/torch/nn/modules/conv.py", line 459, in _conv_forward
    return F.conv2d(input, weight, bias, self.stride,
RuntimeError: Given groups=1, weight of size [32, 3, 7, 7], expected input[30, 1, 320, 320] to have 3 channels, but got 1 channels instead
train: